version: '3.7'
services:

    consumer:                                            # create airflow container
        build: './Dockerfile'                       # construct the container along the Dockerfile in this folder
        container_name: consumer
        restart: always
        ports:
            - "8080:8080"                               # expose port
        command: webserver

    zookeeper:                                          # create zookeeper container
        image: wurstmeister/zookeeper
        container_name: zookeeper_container
        ports:
            - "2181:2181"                               # expose port

    kafka:                                              # create an instance of a Kafka broker in a container
        image: wurstmeister/kafka
        container_name: kafka_container
        ports:
            - "9092:9092"                               # expose port
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka           # specify the docker host IP at which other containers can reach the broker
            KAFKA_CREATE_TOPICS: "TopicA:1:1"           # create a topic called 'TopicA"  with 1 partition and 1 replica
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181     # specify where the broker can reach Zookeeper
            KAFKA_LISTENERS: PLAINTEXT://:9092          # the list of addresses on which the Kafka broker will listen on for incoming connections.
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Kafka sends the value of this variable to clients during their connection. After receiving that value, the clients use it for sending/consuming records to/from the Kafka broker.y connect to it.
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
     producer:
        build: ./producer/.
        image: producer
        container_name: producer
        restart: always   
        environment:
           - TOPICNAME=test
           - KAFKAPORT=kafka:9093
           - RTSPLINK=rtsp://freja.hiof.no:1935/rtplive/_definst_/hessdalen03.stream
        networks:
           - dockerNet
      
     cassandra:
         container_name: cassandra
         build:
         context: cassandra/
         ports:
            - '7000:7000'
            - '7001:7001'
            - '7199:7199'
            - '9042:9042'
            - '9160:9160'
         networks:
            - smart-garage-360
      
      logstash:
        build:
        context: logstash/
        container_name: logstash  
        volumes:
           - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
           - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
        ports:
           - "5000:5000"
        environment:
             LS_JAVA_OPTS: "-Xmx1024m -Xms256m"
        networks:
           - smart-garage-360
        depends_on:
          - elasticsearch
          - cassandra
          - kafka
       
       kibana:
    build:
      context: kibana/
    container_name: kibana  
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - smart-garage-360
    depends_on:
      - elasticsearch
      
      master:
    image: gettyimages/spark:2.2.0-hadoop-2.7
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master -h master
    hostname: master
    environment:
      MASTER: spark://master:7077
      SPARK_CONF_DIR: /conf
      SPARK_PUBLIC_DNS: localhost
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
      - 8080:8080
    networks:
        - smart-garage-360     
    volumes:
      - ./spark/conf/master:/conf
      - ./spark/data:/tmp/data
    depends_on:
      - logstash

  worker:
    image: gettyimages/spark:2.2.0-hadoop-2.7
    container_name: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077
    hostname: worker
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 4
      SPARK_WORKER_MEMORY: 8g
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8081:8081
    networks:
        - smart-garage-360     
    volumes:
      - ./spark/conf/worker:/conf
      - ./spark/data:/tmp/data
    depends_on:
      - logstash
      
   apis:
    container_name: apis
    environment:
      IP_ADDRESS: ${IP_ADDRESS}
      NODE_PORT: 3000
    build:
      context: node-apis/
    ports:
      - "3000:3000"
    depends_on:
      - elasticsearch
      - cassandra
    volumes:
      - ./node-apis/config/:/home/node/config:ro
    command: npm start
    networks:
      - smart-garage-360

  ui:
    container_name: ui
    build:
      context: nginx-ui/
      args:
        REACT_APP_BACKEND_IP_ADDRESS: ${IP_ADDRESS}
        REACT_APP_BACKEND_PORT: 3000
        REACT_APP_GOOGLE_MAP_API_KEY: ${GOOGLE_MAP_API_KEY}
    ports:
      - "80:80"
    depends_on:
      - apis
    networks:
      - smart-garage-360

  python-tracker-module:
    container_name: python-tracker-module
    build:
      context: python/
    depends_on:
      - logstash
    networks:
      - smart-garage-360

networks:
  smart-garage-360:
    driver: bridge
